#!/bin/bash
###############################################################################
# Installations-Script für WireGuard (Kernel-Version)
# von Michael Gasbers
# Stand: 15.10.2022
###############################################################################
if [ $(id -u) -ne 0 ]; then echo " Bitte als Superuser aufrufen!"; exit 1; fi

if [ $SUDO_USER ]; then USER_USERNAME="$SUDO_USER"; else USER_USERNAME=$(whoami); fi
DOWNLOAD_DIR="/home/$USER_USERNAME/Downloads"
RESSOURCE_SERVER_DIR="https://migano.de/download/lissy/res"

dark_grey='\033[0;90m'
bold_red='\033[1;31m'
bold_green='\033[1;32m'
bold_yellow='\033[1;33m'
bold_blue='\033[1;34m'
bold_purple='\033[1;35m'
bold_cyan='\033[1;36m'
bold_white='\033[1;37m'
colors_off='\033[0m'
line_color='\033[0;90m'

OK_TAG="${bold_green}ok${colors_off}"
ERROR_TAG="${bold_red}Fehler${colors_off}"
HINWEIS_TAG="${bold_yellow}Hinweis${colors_off}"

HALF_LINE="${line_color}$(printf '─%.0s' {1..46})${colors_off}"

###############################################################################
# Funktion zur einfachen Ja/Nein-Abfrage
# Rückgaben: 0 = false (Nein)
#            1 = true (Ja)
###############################################################################
function ask_yes_or_no () {
  echo -e -n " $1 [${bold_yellow}j${colors_off}]a oder [${bold_yellow}n${colors_off}]ein? "
  IYN_RESULT=0
  ANSWER=""
  while [ "$ANSWER" = "" ];
  do
    read -N 1 -r -s ANSWER
    ANSWER=$(echo $ANSWER | sed 's/[^JjNn]*//g')
  done
  echo -e "$ANSWER"
  if [ "$ANSWER" = "J" ] ||
     [ "$ANSWER" = "j" ];
  then
    IYN_RESULT=1
  fi
  return $IYN_RESULT
}

###############################################################################
# Extrahieren und Anzeigen der IP-Adresse einer WireGuard-Konfiguration       #
###############################################################################
function show_conf_ip () {
  VPN_IP=$(cat "$1" 2>/dev/null | grep -i -E "^\s*Address\s*\=" | sed "s/^\s*Address\s*\=\s*//")
  if [ "$VPN_IP" == "" ];
  then
    echo -e -n " $ERROR_TAG: Keine IP-Adresse gefunden!"
    return 1
  else
    echo -e -n " IP-Adresse dieser Konfiguration: ${bold_cyan}$VPN_IP${colors_off}"
    return 0
  fi
}

id "$USER_USERNAME" &>/dev/null
if [ $? -eq 0 ] &&
   [ "$USER_USERNAME" != "" ] &&
   [ "$DOWNLOAD_DIR" != "" ] &&
   [ "$RESSOURCE_SERVER_DIR" != "" ];
then
  echo -e "$HALF_LINE"
  echo -e ""
  echo -e " ${bold_white}Installation von WireGuard (Kernel-Version)${colors_off}"
  echo -e ""
  echo -e "$HALF_LINE"
  WG_IS_INSTALLED=1
  if [ $(LANG=en dpkg-query -W -f='${Status}' "wireguard" 2>/dev/null | grep -i -c -E "ok installed") -eq 0 ] ||
     [ $(LANG=en dpkg-query -W -f='${Status}' "wireguard-tools" 2>/dev/null | grep -i -c -E "ok installed") -eq 0 ];
  then
    echo -e " Installiere ${bold_yellow}wireguard${colors_off} und ${bold_yellow}wireguard-tools${colors_off} ... "
    apt install wireguard wireguard-tools -y
    if [ $? -ne 0 ];
    then
      WG_IS_INSTALLED=0
    fi
  else
    echo -e " WireGuard und WireGuard-Tools sind bereits installiert ... $OK_TAG"
  fi
  if [ $WG_IS_INSTALLED -eq 1 ];
  then
    echo -e ""
    echo -e "$HALF_LINE"
    echo -e ""
    echo -e " ${bold_white}Konfiguration von WireGuard (Kernel-Version)${colors_off}"
    echo -e ""
    WG_CONFIG_DEST_DIR="/etc/wireguard"
    if [ -d "$WG_CONFIG_DEST_DIR" ];
    then
      # ---------------------------------------------------------------------------
      # Konfigurationsdatei anlegen
      # ---------------------------------------------------------------------------
      echo -e "$HALF_LINE"
      echo -e " ${bold_purple}Konfigurationsdatei auswählen${colors_off}"
      echo -e " Zur automatischen Einrichtung einer VPN-Verbindung wird eine Konfigurations-"
      echo -e " Datei benötigt, welche typischerweise einfach mit der Fritz!Box erzeugt und"
      echo -e " lokal gespeichert werden kann. Diese Datei wird jetzt in dem Download-Ordner"
      echo -e " gesucht und danach für die Einrichtung des VPN verwendet ..."
      WG_CONFIG_SRC_FILE="$(grep -i -l -z -E "\[\s*Interface\s*\](.*)Address(.*)\[\s*Peer\s*\]" "/home/$USER_USERNAME/Downloads/"* 2>/dev/null | head -n 1 | xargs)"
      SRC_FILE_EXISTS=0
      if [ -s "$WG_CONFIG_SRC_FILE" ];
      then
        echo -e " Konfigurationsdatei ${bold_cyan}$WG_CONFIG_SRC_FILE${colors_off} gefunden."
        show_conf_ip "$WG_CONFIG_SRC_FILE"
        echo -e ""
        ask_yes_or_no "Soll diese Datei verwendet werden?"
        SRC_FILE_EXISTS=$?
      else
        echo -e " Es wurde ${bold_yellow}keine${colors_off} Konfigurationsdatei im Download-Ordner gefunden."
      fi
      if [ $SRC_FILE_EXISTS -eq 0 ];
      then
        WG_CONFIG_SRC_FILE=""
        while [ "$WG_CONFIG_SRC_FILE" == "" ];
        do
          echo -e " Bitte vollständigen Pfad und Namen der zu kopierenden Datei angeben."
          read -p " Konfigurationsdatei: " WG_CONFIG_SRC_FILE
          if [ "$WG_CONFIG_SRC_FILE" != "" ];
          then
            FILE_IS_OK=1
            # Existenzprüfung
            if [ ! -s "$WG_CONFIG_SRC_FILE" ] ||
               [ -d "$WG_CONFIG_SRC_FILE" ];
            then
              FILE_IS_OK=0
            fi
            # Schnellcheck des Datei-Inhalts
            if [ $(cat "$WG_CONFIG_SRC_FILE" 2>/dev/null | grep -i -c -E "^\s*\[\s*Interface") -eq 0 ] ||
               [ $(cat "$WG_CONFIG_SRC_FILE" 2>/dev/null | grep -i -c -E "^\s*Address\s*\=") -eq 0 ] ||
               [ $(cat "$WG_CONFIG_SRC_FILE" 2>/dev/null | grep -i -c -E "^\s*\[\s*Peer") -eq 0 ];
            then
              FILE_IS_OK=0
            else
              show_conf_ip "$WG_CONFIG_SRC_FILE"
              if [ $? -eq 0 ];
              then
                echo -e " ... $OK_TAG"
              fi
            fi
            if [ $FILE_IS_OK -eq 0 ];
            then
              echo -e " $ERROR_TAG: Die angegebene Datei ist keine gültige Konfigurationsdatei."
              WG_CONFIG_SRC_FILE=""
            fi
          fi
        done
      fi
      echo -e "$HALF_LINE"
      echo -e " ${bold_purple}Name der VPN-Verbindung${colors_off}"
      echo -e " Dies ist der Name, mit welchem das Netzwerkinterface der neu einzurichtenden"
      echo -e " VPN-Verbindung in der Übersicht der Netzwerkverbindungen angezeigt wird."
      NAME_IS_OK=0
      while [ $NAME_IS_OK -eq 0 ];
      do
        WG_VPN_NAME=""
        while [ "$WG_VPN_NAME" == "" ];
        do
          read -p " Bitte Namen für die einzurichtende VPN-Verbindung eingeben: " WG_VPN_NAME
          WG_VPN_NAME=$(echo $WG_VPN_NAME | tr -d -c '[:alnum:]_' | tr '[:upper:]' '[:lower:]')
        done
        WG_CONFIG_DEST_FILE="$WG_CONFIG_DEST_DIR/$WG_VPN_NAME"
        WG_CONFIG_DEST_FILE+=".conf"
        if [ -s "$WG_CONFIG_DEST_FILE" ];
        then
          echo -e " $ERROR_TAG: Eine Verbindung mit dem Namen ${bold_yellow}$WG_VPN_NAME${colors_off} existiert schon!"
        else
          ask_yes_or_no "VPN-Verbindung mit Namen ${bold_cyan}$WG_VPN_NAME${colors_off} einrichten?"
          NAME_IS_OK=$?
        fi
      done
      echo -e -n " Erstelle Konfigurationsdatei ${bold_yellow}$WG_CONFIG_DEST_FILE${colors_off} ... "
      cp -f "$WG_CONFIG_SRC_FILE" "$WG_CONFIG_DEST_FILE" &>/dev/null
      if [ $? -eq 0 ];
      then
        echo -e "$OK_TAG"
        echo -e "$HALF_LINE"
        # ---------------------------------------------------------------------------
        # Starter (Desktop-Symbole) anlegen
        # ---------------------------------------------------------------------------
        echo -e " ${bold_purple}Desktop-Symbole anlegen${colors_off}"
        echo -e " Die Aktivierung und Deaktivierung der VPN-Verbindung erfolgt typischerweise"
        echo -e " per Kommandozeile im Terminal. Zur einfacheren Steuerung können dazu jetzt"
        echo -e " zusätzlich entsprechende Starter (Symbole) auf dem Desktop angelegt werden."
        ask_yes_or_no "Desktop-Symbole für VPN-Verbindung anlegen?"
        if [ $? -eq 1 ];
        then
          echo -e -n " Richte Starter für VPN ${bold_cyan}$WG_VPN_NAME${colors_off} ein ... "
          # Download von WireGuardStarter.7z (Vorlagen und Icons als Zip-Datei)
          if [ ! -d "$DOWNLOAD_DIR" ];
          then
            mkdir -p "$DOWNLOAD_DIR" &>/dev/null
            if [ $? -eq 0 ];
            then
              chown "$USER_USERNAME:$USER_USERNAME" "$DOWNLOAD_DIR" &>/dev/null
              chmod 0755 "$DOWNLOAD_DIR" &>/dev/null
            fi
          fi
          DOWNLOAD_FILE_URL="$RESSOURCE_SERVER_DIR/WireGuardStarter.7z"
          DOWNLOAD_FILE_NAME="${DOWNLOAD_FILE_URL##*/}"
          LOCAL_DOWNLOAD_FILE="$DOWNLOAD_DIR/$DOWNLOAD_FILE_NAME"
          wget -nv -O "$LOCAL_DOWNLOAD_FILE" "$DOWNLOAD_FILE_URL" &>/dev/null
          if [ $? -eq 0 ] &&
            [ -s "$LOCAL_DOWNLOAD_FILE" ] &&
            [ $(grep -i -c -E "Error\s*404" "$LOCAL_DOWNLOAD_FILE") -eq 0 ];
          then
            chown "$USER_USERNAME:$USER_USERNAME" "$LOCAL_DOWNLOAD_FILE"
            chmod 664 "$LOCAL_DOWNLOAD_FILE"
            # Zip-Datei entpacken
            ZIP_TARGET_DIR="$DOWNLOAD_DIR/wireguard"
            7z x "$LOCAL_DOWNLOAD_FILE" -o"$ZIP_TARGET_DIR" -y &>/dev/null
            if [ $? -eq 0 ];
            then
              chown -R "$USER_USERNAME:$USER_USERNAME" "$ZIP_TARGET_DIR"
              chmod 755 "$ZIP_TARGET_DIR"
              cd "$ZIP_TARGET_DIR/WireGuardStarter"
              # ---------------------------------------------------------
              # Vorlagen und Icons kopieren und Desktop-Dateien anpassen
              # ---------------------------------------------------------
              USER_DESKTOP_DIR="/home/$USER_USERNAME/Desktop"
              if [ ! -d "$USER_DESKTOP_DIR" ] ||
                 [ -L "$USER_DESKTOP_DIR" ];
              then
                USER_DESKTOP_DIR="/home/$USER_USERNAME/Schreibtisch"
              fi
              if [ -d "$USER_DESKTOP_DIR" ];
              then
                WG_UP_DESK_FILE="$USER_DESKTOP_DIR/wireguard-$WG_VPN_NAME-up.desktop"
                WG_DOWN_DESK_FILE="$USER_DESKTOP_DIR/wireguard-$WG_VPN_NAME-down.desktop"
                cp -f ./wireguard-up.desktop "$WG_UP_DESK_FILE" &>/dev/null
                cp -f ./wireguard-down.desktop "$WG_DOWN_DESK_FILE" &>/dev/null
                if [ $? -eq 0 ];
                then
                  chown "$USER_USERNAME:$USER_USERNAME" "$USER_DESKTOP_DIR/wireguard"*.desktop &>/dev/null
                  if [ $? -eq 0 ];
                  then
                    chmod 775 "$USER_DESKTOP_DIR/wireguard"*.desktop &>/dev/null
                    SED_RESULT_1=1
                    if [ -s "$WG_UP_DESK_FILE" ];
                    then
                      sed -i -E "s/myvpn/${WG_VPN_NAME}/gi" "$WG_UP_DESK_FILE" 2>/dev/null
                      sed -i -E "s/WireGuard Up/VPN ${WG_VPN_NAME} ein/gi" "$WG_UP_DESK_FILE" 2>/dev/null
                      SED_RESULT_1=$?
                    fi
                    SED_RESULT_2=1
                    if [ -s "$WG_DOWN_DESK_FILE" ];
                    then
                      sed -i -E "s/myvpn/${WG_VPN_NAME}/gi" "$WG_DOWN_DESK_FILE" 2>/dev/null
                      sed -i -E "s/WireGuard Down/VPN ${WG_VPN_NAME} aus/gi" "$WG_DOWN_DESK_FILE" 2>/dev/null
                      SED_RESULT_2=$?
                    fi
                    if [ $SED_RESULT_1 -eq 0 ] &&
                      [ $SED_RESULT_2 -eq 0 ];
                    then
                      if [ -d "/usr/share/pixmaps" ];
                      then
                        cp -f ./wireguard*.png /usr/share/pixmaps &>/dev/null
                        if [ $? -eq 0 ];
                        then
                          echo -e "$OK_TAG"
                        else
                          echo -e "$ERROR_TAG 5"
                        fi
                      fi
                    else
                      echo -e "$ERROR_TAG 4"
                    fi
                  else
                    echo -e "$ERROR_TAG 3"
                  fi
                else
                  echo -e "$ERROR_TAG 2"
                fi
              else
                echo -e "$ERROR_TAG 1"
              fi
              # ---------------------------------------------------------
            else
              echo -e "$ERROR_TAG __LINE__"
            fi
          else
            echo -e "$ERROR_TAG __LINE__"
          fi
          # Aufräumen
          if [ -f "$LOCAL_DOWNLOAD_FILE" ];
          then
            rm -f "$LOCAL_DOWNLOAD_FILE" &>/dev/null
          fi
          if [ -d "$ZIP_TARGET_DIR" ];
          then
            rm -f -r "$ZIP_TARGET_DIR" &>/dev/null
          fi
        fi
        # ---------------------------------------------------------------------------
        # Als System-Dienst einrichten
        # ---------------------------------------------------------------------------
        echo -e "$HALF_LINE"
        echo -e " ${bold_purple}System-Dienst einrichten${colors_off}"
        echo -e " Die eingerichtete VPN-Verbindung wird bei einem Neustart des Rechners nicht"
        echo -e " automatisch gestartet. Dazu kann jetzt ein System-Dienst eingerichtet werden."
        ask_yes_or_no "VPN-Verbindung ${bold_cyan}$WG_VPN_NAME${colors_off} permanent aktivieren?"
        if [ $? -eq 1 ];
        then
          echo -e -n " Richte System-Dienst für ${bold_yellow}$WG_VPN_NAME${colors_off} ein ... "
          systemctl enable wg-quick@${WG_VPN_NAME} &>/dev/null
          if [ $? -eq 0 ];
          then
            echo -e "$OK_TAG"
          else
            echo -e "$ERROR_TAG $LINENO"
          fi
        fi
        # ---------------------------------------------------------------------------
        # VPN-Verbindung aktivieren
        # ---------------------------------------------------------------------------
        echo -e "$HALF_LINE"
        echo -e " ${bold_purple}VPN-Verbindung aktivieren${colors_off}"
        echo -e " Die neu eingerichtete VPN-Verbindung ist noch nicht aktiv"
        ask_yes_or_no "VPN-Verbindung ${bold_cyan}$WG_VPN_NAME${colors_off} jetzt aktivieren?"
        if [ $? -eq 1 ];
        then
          echo -e -n " Aktiviere die VPN-Verbindung mit Adresse ${bold_yellow}$VPN_IP${colors_off} ... "
          wg-quick up "$WG_VPN_NAME" &>/dev/null
          if [ $? -eq 0 ];
          then
            echo -e "$OK_TAG"
            echo -e " ${bold_yellow}HINWEIS${colors_off}: Es kann ein paar Sekunden dauern, bis"
            echo -e " die Verbindung zum VPN-Server aufgebaut ist."
          else
            echo -e "$ERROR_TAG"
          fi
        fi
        echo -e "$HALF_LINE"
        echo -e " ${bold_yellow}ACHTUNG${colors_off}: Damit die VPN-Verbindung auch funktioniert, müssen eventuell"
        echo -e " noch individuelle Freigaben in der Firewall eingerichtet werden!"
      else
        echo -e "$ERROR_TAG"
      fi
    else
      echo -e " $ERROR_TAG: WireGuard scheint nicht korrekt installiert zu sein!"
    fi
  else
    echo -e " $ERROR_TAG: WireGuard oder WireGuard-Tools sind nicht verfügbar!"
  fi
else
  echo -e " $ERROR_TAG: Kein gültiger Parameter!"
fi
echo -e ""
