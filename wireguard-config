#!/bin/bash
###############################################################################
#                                                                             #
#                   WireGuard - Installer and Configurator                    #
#        -------------------------------------------------------------        #
#        Installation und Konfiguration von WireGuard (Kernel-Version)        #
#                                                                             #
#                       (C)opyright bei Michael Gasbers                       #
#                      MIGANO Professional Web Solutions                      #
#                                                                             #
#                             All rights reserved.                            #
#                                                                             #
###############################################################################
#                                                                             #
# DIESE SOFTWARE WIRD OHNE MÄNGELGEWÄHR UND OHNE JEGLICHE AUSDRÜCKLICHE ODER  #
# STILLSCHWEIGENDE GARANTIE ZUR VERFÜGUNG GESTELLT, EINSCHLIESSLICH UND OHNE  #
# EINSCHRÄNKUNG JEGLICHER GARANTIE FÜR DIE GEBRAUCHSTAUGLICHKEIT ODER EIGNUNG #
# FÜR EINEN BESTIMMTEN ZWECK. ALLE RISIKEN IN BEZUG AUF ERGEBNISSE UND        #
# LEISTUNG DIESER SOFTWARE WERDEN VOLLSTÄNDIG VOM BENUTZER ÜBERNOMMEN!        #
#  *************************************************************************  #
# THIS SOFTWARE IS PROVIDED "AS IS" WITH NO WARRANTIES WHAT SO EVER, WHETHER  #
# EXPRESSED OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF       #
# USABILITY OR FITNESS FOR A PARTICULAR PURPOSE. ALL RISKS CONCERNING RESULTS #
# AND PERFORMANCE OF THIS SOFTWARE ARE ASSUMED COMPLETELY BY THE USER!        #
#                                                                             #
###############################################################################
#                                                                             #
#  Jegliche Form der Kopie, Veränderung und kommerziellen Verbreitung dieses  #
#  Scripts oder Teilen davon sowie des Quellcodes ist strengstens verboten!   #
#  *************************************************************************  #
#   Any form of copying, modification or commercial distribution of this      #
#   script or any part thereof or it's sourcecode is strictly prohibited!     #
#  *************************************************************************  #
#   Für Anregungen und Fragen nehmen Sie bitte Kontakt mit uns auf über       #
#   https://migano.de oder per E-Mail an >> kontakt@migano.de <<. Danke.      #
#                                                                             #
###############################################################################
VERSION="1.02"
# Letzte Änderung: 18.10.2022
###############################################################################
if [ $(id -u) -ne 0 ]; then echo " Bitte als Superuser aufrufen!"; exit 1; fi

if [ $SUDO_USER ]; then USER_USERNAME="$SUDO_USER"; else USER_USERNAME=$(whoami); fi
DOWNLOAD_DIR="/home/$USER_USERNAME/Downloads"
RESSOURCE_SERVER_DIR="https://migano.de/download/lissy/res"

# Text normal
black='\033[0;30m'
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
purple='\033[0;35m'
cyan='\033[0;36m'
white='\033[0;97m'
# Text hell
dark_grey='\033[0;90m'
light_red='\033[0;91m'
light_green='\033[0;92m'
light_yellow='\033[0;93m'
light_blue='\033[0;94m'
light_purple='\033[0;95m'
light_cyan='\033[0;96m'
light_grey='\033[0;37m'
# Text fett
dark_grey='\033[0;90m'
bold_red='\033[1;31m'
bold_green='\033[1;32m'
bold_yellow='\033[1;33m'
bold_blue='\033[1;34m'
bold_purple='\033[1;35m'
bold_cyan='\033[1;36m'
bold_white='\033[1;37m'
colors_off='\033[0m'
line_color='\033[0;90m'

OK_TAG="${bold_green}ok${colors_off}"
ERROR_TAG="${bold_red}Fehler${colors_off}"
HINWEIS_TAG="${bold_yellow}Hinweis${colors_off}"

HALF_LINE="${line_color}$(printf '─%.0s' {1..46})${colors_off}"

###############################################################################
# Funktion zur einfachen Ja/Nein-Abfrage
# Rückgaben: 0 = false (Nein)
#            1 = true (Ja)
###############################################################################
function ask_yes_or_no () {
  echo -e -n " $1 [${bold_yellow}j${colors_off}]a oder [${bold_yellow}n${colors_off}]ein? "
  IYN_RESULT=0
  ANSWER=""
  while [ "$ANSWER" = "" ];
  do
    read -N 1 -r -s ANSWER
    ANSWER=$(echo $ANSWER | sed 's/[^JjNn]*//g')
  done
  echo -e "$ANSWER"
  if [ "$ANSWER" = "J" ] ||
     [ "$ANSWER" = "j" ];
  then
    IYN_RESULT=1
  fi
  return $IYN_RESULT
}

###############################################################################
# Funktion zum Löschen einer bestimmten einzelnen Datei
###############################################################################
function remove_file () {
  if [ "$1" != "" ] &&
     [ -f "$1" ];
  then
    rm -f "$1" &>/dev/null
  fi
}

###############################################################################
# Extrahieren und Anzeigen der IP-Adresse einer WireGuard-Konfiguration       #
###############################################################################
function get_conf_ip () {
  VPN_IP=$(cat "$1" 2>/dev/null | grep -i -E "^\s*Address\s*\=" | sed "s/^\s*Address\s*\=\s*//")
}
function show_conf_ip () {
  get_conf_ip "$1"
  if [ "$VPN_IP" == "" ];
  then
    echo -e -n "$ERROR_TAG"
    return 1
  else
    echo -e -n "${light_cyan}$VPN_IP${colors_off}"
    return 0
  fi
}

id "$USER_USERNAME" &>/dev/null
if [ $? -eq 0 ] &&
   [ "$USER_USERNAME" != "" ] &&
   [ "$DOWNLOAD_DIR" != "" ] &&
   [ "$RESSOURCE_SERVER_DIR" != "" ];
then
  echo -e "$HALF_LINE"
  echo -e ""
  echo -e " ${bold_white}Installation von WireGuard (Kernel-Version)${colors_off}"
  echo -e ""
  WG_IS_INSTALLED=1
  if [ $(LANG=en dpkg-query -W -f='${Status}' "wireguard" 2>/dev/null | grep -i -c -E "ok installed") -eq 0 ] ||
     [ $(LANG=en dpkg-query -W -f='${Status}' "wireguard-tools" 2>/dev/null | grep -i -c -E "ok installed") -eq 0 ];
  then
    echo -e " Installiere ${light_yellow}wireguard${colors_off} und ${light_yellow}wireguard-tools${colors_off} ... "
    apt install wireguard wireguard-tools -y
    if [ $? -ne 0 ];
    then
      WG_IS_INSTALLED=0
    fi
  else
    echo -e " WireGuard und WireGuard-Tools sind bereits installiert ... $OK_TAG"
  fi
  echo -e ""
  echo -e "$HALF_LINE"
  echo -e ""
  if [ $WG_IS_INSTALLED -eq 1 ];
  then
# ================================ CONFIG START ================================
    echo -e " ${bold_white}Konfiguration von WireGuard (Kernel-Version)${colors_off}"
    echo -e ""
    WG_CONFIG_DEST_DIR="/etc/wireguard"
    if [ -d "$WG_CONFIG_DEST_DIR" ];
    then
      declare -A WG_CONFIG_LIST # Liste bestehender Konfigurationsdateien
      ANZ_WG_CONFIGS=0          # Anzahl bestehender Konfigurationsdateien
      WG_VPN_NAME=""            # Dateiname der aktuellen Konfigurationsdatei
      # -----------------------------------------------------------------------
      # Liste bestehender Konfigurationen einlesen
      # -----------------------------------------------------------------------
      TMP_CONFIG_LIST=($(ls -A "$WG_CONFIG_DEST_DIR/"*.conf 2>/dev/null | sed -E "s/\.conf$//gi" | xargs | tr '\n' ' '))
      if [ ${#TMP_CONFIG_LIST[@]} -gt 0 ];
      then
        echo -e " $HINWEIS_TAG: Es sind bereits folgende Konfigurationen vorhanden:"
        for cfg_file in ${TMP_CONFIG_LIST[@]};
        do
          echo -e -n " - $cfg_file (" | sed -E "s/\/etc\/wireguard\///gi"
          show_conf_ip "$cfg_file.conf"
          if [ $(cat "$cfg_file.conf" 2>/dev/null | grep -i -c -z -E "\[\s*Interface\s*\](.*)Address(.*)\[\s*Peer\s*\]" 2>/dev/null) -gt 0 ];
          then
            WG_CONFIG_LIST[$ANZ_WG_CONFIGS]="$cfg_file"
            ((ANZ_WG_CONFIGS+=1))
          fi
          echo -e ")"
        done
        ask_yes_or_no "Jetzt eine neue Konfiguration erstellen?"
        CREATE_NEW_CONFIG=$?
      else
        CREATE_NEW_CONFIG=1
      fi
      # -----------------------------------------------------------------------
      # Neue Konfigurationsdatei anlegen
      # -----------------------------------------------------------------------
      if [ $CREATE_NEW_CONFIG -eq 1 ];
      then
        echo -e "$HALF_LINE"
        echo -e " ${bold_purple}Konfigurationsdatei auswählen${colors_off}"
        echo -e " Die Einrichtung einer VPN-Verbindung kann auf Basis einer Konfigurations-"
        echo -e " Datei oder durch manuelle Eingabe der Daten erfolgen. Es wird jetzt erst"
        echo -e " in dem Download-Ordner nach einer geeigneten Datei gesucht ..."
        A_OR_M=""
        # --------------------------------------------------------
        # Geeignete Konfigurationsdatei im Download-Ordner suchen
        # --------------------------------------------------------
        WG_CONFIG_SRC_FILE="$(grep -i -l -z -E "\[\s*Interface\s*\](.*)Address(.*)\[\s*Peer\s*\]" "/home/$USER_USERNAME/Downloads/"* 2>/dev/null | head -n 1 | xargs)"
        SRC_FILE_EXISTS=0
        if [ "$WG_CONFIG_SRC_FILE" != "" ] &&
           [ $(cat "$WG_CONFIG_SRC_FILE" 2>/dev/null | grep -i -c -E "\[\s*Peer\s*\]") -eq 1 ] &&
           [ "${WG_CONFIG_SRC_FILE##*/}" != "${0##*/}" ];
        then
          echo -e " Konfigurationsdatei ${light_cyan}$WG_CONFIG_SRC_FILE${colors_off} gefunden."
          echo -e -n " IP-Adresse dieser Konfiguration: "
          show_conf_ip "$WG_CONFIG_SRC_FILE"
          echo -e ""
          ask_yes_or_no "Soll diese Datei verwendet werden?"
          SRC_FILE_EXISTS=$?
        else
          echo -e " Es wurde ${bold_yellow}keine${colors_off} geeignete Konfigurationsdatei im Download-Ordner gefunden."
        fi
        if [ $SRC_FILE_EXISTS -eq 0 ];
        then
          echo -e " Soll eine andere Konfigurationsdatei verwendet werden [${bold_yellow}a${colors_off}] oder"
          echo -e -n " sollen die Daten jetzt manuell eingeben werden [${bold_yellow}m${colors_off}]? "
          while [ "$A_OR_M" == "" ];
          do
            read -N 1 -r -s A_OR_M
            A_OR_M=$(echo "$A_OR_M" | sed 's/[^AaMm]*//g' | tr '[:upper:]' '[:lower:]')
            echo -e "$A_OR_M"
            if [ "$A_OR_M" != "a" ] &&
               [ "$A_OR_M" != "m" ];
            then
              echo -e -n " Bitte nur [${bold_yellow}a${colors_off}] oder [${bold_yellow}m${colors_off}] eingeben: "
              A_OR_M=""
            fi
          done
          # -------------------------------------------------------------------
          # Daten manuell eintragen
          # -------------------------------------------------------------------
          if [ "$A_OR_M" == "m" ];
          then
            CONFIG_DATA_OK=0
            while [ $CONFIG_DATA_OK -eq 0 ];
            do
              echo -e "$HALF_LINE"
              echo -e " Bitte Konfigurationsdaten eingeben (Vorgabewerte ggf. ändern)."
              echo -e " ${light_cyan}[Interface]${colors_off}"
              read -r                                     -p " PrivateKey: " private_key
              read -r -e -i "192.168.188.XXX/24"          -p " Address: " ip_address
              read -r -e -i "192.168.188.1"               -p " DNS (IP): " dns_ip
              read -r -e -i "fritz.box"                   -p " DNS (Name): " dns_name
              echo -e " ${light_cyan}[Peer]${colors_off}"
              read -r                                     -p " PublicKey: " public_key
              read -r                                     -p " PresharedKey: " preshared_key
              read -r -e -i "192.168.188.0/24,0.0.0.0/0"  -p " AllowedIPs: " allowed_ips
              read -r -e -i "INDIVIDUAL.myfritz.net:PORT" -p " Endpoint: " endpoint
              read -r -e -i "25"                          -p " PersistentKeepalive: " keepalive
              echo -e "$HALF_LINE"
              echo -e " ${light_yellow}[Interface]${colors_off}"
              echo -e " PrivateKey = $private_key"
              echo -e " Address = $ip_address"
              echo -e " DNS = $dns_ip"
              echo -e " DNS = $dns_name"
              echo -e " ${light_yellow}[Peer]${colors_off}"
              echo -e " PublicKey = $public_key"
              echo -e " PresharedKey = $preshared_key"
              echo -e " AllowedIPs = $allowed_ips"
              echo -e " Endpoint = $endpoint"
              echo -e " PersistentKeepalive = $keepalive"
              echo -e ""
              if [ "$private_key"   != "" ] &&
                 [ "$ip_address"    != "" ] &&
                 [ $(echo "$ip_address" | grep -c -E "XXX") -eq 0 ] &&
                 [ "$dns_ip"        != "" ] &&
                 [ "$public_key"    != "" ] &&
                 [ "$preshared_key" != "" ] &&
                 [ "$allowed_ips"   != "" ] &&
                 [ "$endpoint"      != "" ] &&
                 [ $(echo "$endpoint" | grep -c -E "INDIVIDUAL") -eq 0 ] &&
                 [ $(echo "$endpoint" | grep -c -E "PORT") -eq 0 ] &&
                 [ "$keepalive"     != "" ];
              then
                ask_yes_or_no "Konfiguration jetzt mit diesen Daten erstellen?"
                CONFIG_DATA_OK=$?
              else
                echo -e " $ERROR_TAG: Die Konfiguration ist nicht vollständig, bitte wiederholen."
              fi
            done
            WG_CONFIG_SRC_FILE="$DOWNLOAD_DIR/wg_config_new.tmp"
            echo -e "[Interface]" > "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "PrivateKey = $private_key" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "Address = $ip_address" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "DNS = $dns_ip" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "DNS = $dns_name" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "[Peer]" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "PublicKey = $public_key" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "PresharedKey = $preshared_key" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "AllowedIPs = $allowed_ips" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "Endpoint = $endpoint" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
            echo -e "PersistentKeepalive = $keepalive" >> "$WG_CONFIG_SRC_FILE" 2>/dev/null
          fi
          # -------------------------------------------------------------------
          # Andere Datei verwenden
          # -------------------------------------------------------------------
          if [ "$A_OR_M" == "a" ];
          then
            WG_CONFIG_SRC_FILE=""
            while [ "$WG_CONFIG_SRC_FILE" == "" ];
            do
              echo -e " Bitte vollständigen Pfad und Namen der zu kopierenden Datei angeben."
              read -p " Konfigurationsdatei: " WG_CONFIG_SRC_FILE
              if [ "$WG_CONFIG_SRC_FILE" != "" ];
              then
                FILE_IS_OK=1
                # Existenzprüfung
                if [ ! -s "$WG_CONFIG_SRC_FILE" ] ||
                   [ -d "$WG_CONFIG_SRC_FILE" ];
                then
                  FILE_IS_OK=0
                fi
                # Schnellcheck des Datei-Inhalts
                if [ $(cat "$WG_CONFIG_SRC_FILE" 2>/dev/null | grep -i -c -E "^\s*\[\s*Interface") -eq 0 ] ||
                   [ $(cat "$WG_CONFIG_SRC_FILE" 2>/dev/null | grep -i -c -E "^\s*Address\s*\=") -eq 0 ] ||
                   [ $(cat "$WG_CONFIG_SRC_FILE" 2>/dev/null | grep -i -c -E "^\s*\[\s*Peer\s*\]") -ne 1 ];
                then
                  FILE_IS_OK=0
                else
                  echo -e -n " IP-Adresse dieser Konfiguration: "
                  show_conf_ip "$WG_CONFIG_SRC_FILE"
                  if [ $? -eq 0 ];
                  then
                    echo -e " ... $OK_TAG"
                  fi
                fi
                if [ $FILE_IS_OK -eq 0 ];
                then
                  echo -e " $ERROR_TAG: Die angegebene Datei ist keine gültige Konfigurationsdatei."
                  WG_CONFIG_SRC_FILE=""
                fi
              fi
            done
          fi
          # -------------------------------------------------------------------
        fi
        echo -e "$HALF_LINE"
        echo -e " ${bold_purple}Name der VPN-Verbindung${colors_off}"
        echo -e " Dies ist der Name, mit welchem das Netzwerkinterface der neu einzurichtenden"
        echo -e " VPN-Verbindung in der Übersicht der Netzwerkverbindungen angezeigt wird."
        NAME_IS_OK=0
        while [ $NAME_IS_OK -eq 0 ];
        do
          WG_VPN_NAME=""
          while [ "$WG_VPN_NAME" == "" ];
          do
            read -p " Bitte Namen für die einzurichtende VPN-Verbindung eingeben: " WG_VPN_NAME
            WG_VPN_NAME=$(echo $WG_VPN_NAME | tr -d -c '[:alnum:]_' | tr '[:upper:]' '[:lower:]')
          done
          WG_CONFIG_DEST_FILE="$WG_CONFIG_DEST_DIR/$WG_VPN_NAME"
          WG_CONFIG_DEST_FILE+=".conf"
          if [ -s "$WG_CONFIG_DEST_FILE" ];
          then
            echo -e " $ERROR_TAG: Eine Verbindung mit dem Namen ${light_yellow}$WG_VPN_NAME${colors_off} existiert schon!"
          else
            ask_yes_or_no "VPN-Verbindung mit Namen ${light_cyan}$WG_VPN_NAME${colors_off} einrichten?"
            NAME_IS_OK=$?
          fi
        done
        echo -e -n " Erstelle Konfigurationsdatei ${light_yellow}$WG_CONFIG_DEST_FILE${colors_off} ... "
        cp -f "$WG_CONFIG_SRC_FILE" "$WG_CONFIG_DEST_FILE" &>/dev/null
        if [ $? -eq 0 ];
        then
          echo -e "$OK_TAG"
        else # Fehler bei der Erstellung der Konfigurationsdatei
          echo -e "$ERROR_TAG"
          WG_VPN_NAME=""
        fi
        if [ "$A_OR_M" == "m" ];
        then
          remove_file "$WG_CONFIG_SRC_FILE"
        fi
      fi # Ende Konfigurationsdatei anlegen
      # -----------------------------------------------------------------------
      # Zusätzliche Optionen
      # -----------------------------------------------------------------------
      # Wenn keine neue Konfiguration angelegt wurde, aber es bereits schon
      # eine gibt, dann bestehende Konfiguration für die Optionen auswählen
      if [ "$WG_VPN_NAME" == "" ] &&
         [ $ANZ_WG_CONFIGS -gt 0 ];
      then
        echo -e ""
        echo -e "$HALF_LINE"
        echo -e ""
        echo -e " ${bold_white}Zusätzliche Optionen für Konfigurationen${colors_off}"
        echo -e ""
        echo -e " Verfügbare Konfigurationen zur Durchführung weiterer Optionen.";
        i=0
        while [ $i -lt $ANZ_WG_CONFIGS ];
        do
          ((idx_nr=i+1))
          cfg_file="${WG_CONFIG_LIST[$i]}"
          echo -e -n " [${bold_yellow}$idx_nr${colors_off}] $cfg_file (" | sed -E "s/\/etc\/wireguard\///gi"
          show_conf_ip "$cfg_file.conf"
          echo -e ")"
          ((i+=1))
        done
        CONFIG_IDX=-1
        echo -e -n " Bitte Konfiguration auswählen (oder 0 zum Überspringen der Optionen): "
        while [ $CONFIG_IDX -lt 0 ] ||
              [ $CONFIG_IDX -gt $ANZ_WG_CONFIGS ];
        do
          read -N 1 -r -s CONFIG_IDX
          CONFIG_IDX=$(echo $CONFIG_IDX | sed 's/[^0-9]*//g')
          if [ "$CONFIG_IDX" == "" ];
          then
            CONFIG_IDX=-1
          fi
        done
        echo -e "$CONFIG_IDX"
        if [ $CONFIG_IDX -gt 0 ];
        then
          ((CONFIG_IDX-=1))
          WG_VPN_NAME="$(echo ${WG_CONFIG_LIST[$CONFIG_IDX]} | sed -E "s/\/etc\/wireguard\///gi")"
          get_conf_ip "${WG_CONFIG_LIST[$CONFIG_IDX]}.conf"
        else
          echo -e ""
        fi
      fi
      if [ "$WG_VPN_NAME" != "" ];
      then
        # -------------------------------------------------------------------
        # Starter (Desktop-Symbole) anlegen
        # -------------------------------------------------------------------
        echo -e "$HALF_LINE"
        echo -e " ${bold_purple}Desktop-Symbole anlegen${colors_off}"
        echo -e " Die Aktivierung und Deaktivierung der VPN-Verbindung erfolgt typischerweise"
        echo -e " per Kommandozeile im Terminal. Zur einfacheren Steuerung können dazu jetzt"
        echo -e " zusätzlich entsprechende Starter (Symbole) auf dem Desktop angelegt werden."
        ask_yes_or_no "Desktop-Symbole für VPN ${light_cyan}$WG_VPN_NAME${colors_off} anlegen?"
        if [ $? -eq 1 ];
        then
          echo -e -n " Richte Starter für ${bold_yellow}$WG_VPN_NAME${colors_off} ein ... "
          # Download von WireGuardStarter.7z (Vorlagen und Icons als Zip-Datei)
          if [ ! -d "$DOWNLOAD_DIR" ];
          then
            mkdir -p "$DOWNLOAD_DIR" &>/dev/null
            if [ $? -eq 0 ];
            then
              chown "$USER_USERNAME:$USER_USERNAME" "$DOWNLOAD_DIR" &>/dev/null
              chmod 0755 "$DOWNLOAD_DIR" &>/dev/null
            fi
          fi
          DOWNLOAD_FILE_URL="$RESSOURCE_SERVER_DIR/WireGuardStarter.7z"
          DOWNLOAD_FILE_NAME="${DOWNLOAD_FILE_URL##*/}"
          LOCAL_DOWNLOAD_FILE="$DOWNLOAD_DIR/$DOWNLOAD_FILE_NAME"
          wget -nv -O "$LOCAL_DOWNLOAD_FILE" "$DOWNLOAD_FILE_URL" &>/dev/null
          if [ $? -eq 0 ] &&
             [ -s "$LOCAL_DOWNLOAD_FILE" ] &&
             [ $(grep -i -c -E "Error\s*404" "$LOCAL_DOWNLOAD_FILE") -eq 0 ];
          then
            chown "$USER_USERNAME:$USER_USERNAME" "$LOCAL_DOWNLOAD_FILE"
            chmod 664 "$LOCAL_DOWNLOAD_FILE"
            # Zip-Datei entpacken
            ZIP_TARGET_DIR="$DOWNLOAD_DIR/wireguard"
            7z x "$LOCAL_DOWNLOAD_FILE" -o"$ZIP_TARGET_DIR" -y &>/dev/null
            if [ $? -eq 0 ];
            then
              chown -R "$USER_USERNAME:$USER_USERNAME" "$ZIP_TARGET_DIR"
              chmod 755 "$ZIP_TARGET_DIR"
              cd "$ZIP_TARGET_DIR/WireGuardStarter"
              # ---------------------------------------------------------
              # Vorlagen und Icons kopieren und Desktop-Dateien anpassen
              # ---------------------------------------------------------
              USER_DESKTOP_DIR="/home/$USER_USERNAME/Desktop"
              if [ ! -d "$USER_DESKTOP_DIR" ] ||
                 [ -L "$USER_DESKTOP_DIR" ];
              then
                USER_DESKTOP_DIR="/home/$USER_USERNAME/Schreibtisch"
              fi
              if [ -d "$USER_DESKTOP_DIR" ];
              then
                WG_UP_DESK_FILE="$USER_DESKTOP_DIR/wireguard-$WG_VPN_NAME-up.desktop"
                WG_DOWN_DESK_FILE="$USER_DESKTOP_DIR/wireguard-$WG_VPN_NAME-down.desktop"
                cp -f ./wireguard-up.desktop "$WG_UP_DESK_FILE" &>/dev/null
                cp -f ./wireguard-down.desktop "$WG_DOWN_DESK_FILE" &>/dev/null
                if [ $? -eq 0 ];
                then
                  chown "$USER_USERNAME:$USER_USERNAME" "$USER_DESKTOP_DIR/wireguard"*.desktop &>/dev/null
                  if [ $? -eq 0 ];
                  then
                    chmod 775 "$USER_DESKTOP_DIR/wireguard"*.desktop &>/dev/null
                    SED_RESULT_1=1
                    if [ -s "$WG_UP_DESK_FILE" ];
                    then
                      sed -i -E "s/myvpn/${WG_VPN_NAME}/gi" "$WG_UP_DESK_FILE" 2>/dev/null
                      sed -i -E "s/WireGuard Up/VPN ${WG_VPN_NAME} ein/gi" "$WG_UP_DESK_FILE" 2>/dev/null
                      SED_RESULT_1=$?
                    fi
                    SED_RESULT_2=1
                    if [ -s "$WG_DOWN_DESK_FILE" ];
                    then
                      sed -i -E "s/myvpn/${WG_VPN_NAME}/gi" "$WG_DOWN_DESK_FILE" 2>/dev/null
                      sed -i -E "s/WireGuard Down/VPN ${WG_VPN_NAME} aus/gi" "$WG_DOWN_DESK_FILE" 2>/dev/null
                      SED_RESULT_2=$?
                    fi
                    if [ $SED_RESULT_1 -eq 0 ] &&
                       [ $SED_RESULT_2 -eq 0 ];
                    then
                      if [ -d "/usr/share/pixmaps" ];
                      then
                        cp -f ./wireguard*.png /usr/share/pixmaps &>/dev/null
                        if [ $? -eq 0 ];
                        then
                          echo -e "$OK_TAG"
                        else
                          echo -e "$ERROR_TAG 5"
                        fi
                      fi
                    else
                      echo -e "$ERROR_TAG 4"
                    fi
                  else
                    echo -e "$ERROR_TAG 3"
                  fi
                else
                  echo -e "$ERROR_TAG 2"
                fi
              else
                echo -e "$ERROR_TAG 1"
              fi
            else
              echo -e "$ERROR_TAG __LINE__"
            fi
          else
            echo -e "$ERROR_TAG __LINE__"
          fi
          remove_file "$LOCAL_DOWNLOAD_FILE"
          if [ -d "$ZIP_TARGET_DIR" ];
          then
            rm -f -r "$ZIP_TARGET_DIR" &>/dev/null
          fi
        fi # Ende Starter anlegen
        # -------------------------------------------------------------------
        # Als System-Dienst einrichten
        # -------------------------------------------------------------------
        echo -e "$HALF_LINE"
        echo -e " ${bold_purple}System-Dienst einrichten${colors_off}"
        if [ $(LANG=en systemctl is-enabled wg-quick@${WG_VPN_NAME} 2>/dev/null | grep -i -c -E "enabled") -ne 0 ];
        then
          echo -e " Die VPN-Verbindung ${light_cyan}$WG_VPN_NAME${colors_off} ist bereits als System-Dienst eingerichtet."
          ask_yes_or_no "System-Dienst VPN ${light_cyan}$WG_VPN_NAME${colors_off} jetzt ${bold_yellow}de${colors_off}aktivieren?"
          if [ $? -eq 1 ];
          then
            echo -e -n " Deaktiviere System-Dienst für ${light_yellow}$WG_VPN_NAME${colors_off} ... "
            systemctl disable wg-quick@${WG_VPN_NAME} &>/dev/null
            if [ $? -eq 0 ];
            then
              echo -e "$OK_TAG"
            else
              echo -e "$ERROR_TAG $LINENO"
            fi
          fi
        else
          echo -e " Die ausgewählte VPN-Verbindung wird bei einem Neustart des Rechners nicht"
          echo -e " automatisch gestartet. Dazu kann jetzt ein System-Dienst eingerichtet werden."
          ask_yes_or_no "VPN-Verbindung ${light_cyan}$WG_VPN_NAME${colors_off} als Dienst einrichten?"
          if [ $? -eq 1 ];
          then
            echo -e -n " Richte System-Dienst für ${light_yellow}$WG_VPN_NAME${colors_off} ein ... "
            systemctl enable wg-quick@${WG_VPN_NAME} &>/dev/null
            if [ $? -eq 0 ];
            then
              echo -e "$OK_TAG"
            else
              echo -e "$ERROR_TAG $LINENO"
            fi
          fi
        fi
        # -------------------------------------------------------------------
        # VPN-Verbindung aktivieren
        # -------------------------------------------------------------------
        echo -e "$HALF_LINE"
        echo -e " ${bold_purple}VPN-Verbindung aktivieren${colors_off}"
        if [ $(LANG=en wg show 2>/dev/null | grep -i -c -z -E "interface\s*\:*\s*$WG_VPN_NAME") -gt 0 ];
        then
          echo -e " Die VPN-Verbindung ${light_cyan}$WG_VPN_NAME${colors_off} ist bereits aktiv."
          ask_yes_or_no "VPN-Verbindung ${light_cyan}$WG_VPN_NAME${colors_off} jetzt ${bold_yellow}de${colors_off}aktivieren?"
          if [ $? -eq 1 ];
          then
            echo -e -n " Deaktiviere VPN-Verbindung ${light_yellow}$WG_VPN_NAME${colors_off} ... "
            wg-quick down "$WG_VPN_NAME" &>/dev/null
            if [ $? -eq 0 ];
            then
              echo -e "$OK_TAG"
            else
              echo -e "$ERROR_TAG $LINENO"
            fi
          fi
        else
          echo -e " Die ausgewählte VPN-Verbindung ist noch nicht aktiv."
          ask_yes_or_no "VPN-Verbindung ${light_cyan}$WG_VPN_NAME${colors_off} jetzt aktivieren?"
          if [ $? -eq 1 ];
          then
            echo -e -n " Aktiviere die VPN-Verbindung mit Adresse ${light_yellow}$VPN_IP${colors_off} ... "
            wg-quick up "$WG_VPN_NAME" &>/dev/null
            if [ $? -eq 0 ];
            then
              echo -e "$OK_TAG"
              echo -e " $HINWEIS_TAG: Es kann ein paar Sekunden dauern, bis"
              echo -e " die Verbindung zum VPN-Server aufgebaut ist."
            else
              echo -e "$ERROR_TAG"
            fi
          fi
        fi
        # -------------------------------------------------------------------
      fi # Ende der zusätzlichen Optionen
      echo -e "$HALF_LINE"
      echo -e " $HINWEIS_TAG: Damit VPN-Verbindungen funktionieren, müssen eventuell"
      echo -e " noch individuelle Freigaben in der Firewall eingerichtet werden!"
      echo -e "$HALF_LINE"
    else
      echo -e " $ERROR_TAG: WireGuard scheint nicht korrekt installiert zu sein!"
    fi
# ================================= CONFIG END =================================
  else
    echo -e " $ERROR_TAG: WireGuard oder WireGuard-Tools sind nicht verfügbar!"
  fi
else
  echo -e " $ERROR_TAG: Kein gültiger Parameter!"
fi
echo -e ""
